15강 Javascript - 제어문
https://opentutorials.org/course/3332/21060


Program?
 오페라에서 시간의 순서에 따라 진행되는 데 이러한 것들또한 Program 이라고 불림. 따라서 소프트웨어 이외에도 사용된 용어. 주로 시간의 순서에 따라 진행 되어지는 것들을 뜻함.

그렇다면 왜 우리를 Programer라고 하는가?
- 시간의 순서에 따라 진행되어야 하는 컴퓨터의 명령들을 실행되도록 설계하는 사람 이기 때문입니다. 

프로그램이 복잡해지는 과정을 보면서 복잡해지는것보다 중요한 것은 간단한 것을 통해서도 많은일을 해낼 수 있다는 것을 생각해보자.


 우리가 자바스크립트를 사용하는 첫 번재 이유는 nodejs를 실행시키는 방법은 자바스크립트 이기 때문에 이것만으로도 충분히 많은일을 해낼 수 잇음. 하지만 우리가 하고자 하는 일들은 상당한 경우 복합적이고 복잡하기 때문에  하나의 명령을 실행하는 것을 통해서는 부족할 수가 있다. 

 프로그램을 실행시키기 위해 예를들어 console.log('a'); 명령어를 입력하고 그결과나온 후에 다시 명령어를 입력하고 그결과를 보는것처럼 단계적으로 명령을 내림.
 이러한 명령 명령 주기성을 가지는게 있음 이런경우 매번 같은일을 반복하는 낭비가 발생. 이러한 반복적이고 주기성 가지는 것들을 우리는 기계에 맡기고 싶어함. 
 1차적으로 syntax/program1.js에서 저장해둔 것처럼 자주 사용하는 것을 저장해 두고 필요할때마다 복사하여 붙여스기를 함.
 2차적으로는 syntax/program1.js를 통째로 실행 시켜버림. node syntax/program1.js 명령어를 통해서.

 이러한 맥락에서 우리가 만든 program1.js가 소프트웨어 분야에서 말하는 프로그램이고 이러한 것을 짜는 사람을 프로그래머라함. 이러한 것을 짜는 행위를 프로그래밍이라함. 

 하지만 현실은 복잡하기 때문에 여러가지 문제가 발생함. 상황에 따라 써야하는 프로그램이 달라짐.

 해결할 첫번째 방법 => 프로그램을 상황이 발생하는 수만큼 만들어냄(program1.js, program2.js)
		- 이방법은 상황에 따라 무한히 만들어 질 수 있음
		- 예를들어서 프로그램에 1억개의 코드가 있고 단지 1개가 상황에 따라 달라진다면 많은 용량을 차지하는 프로그램을 상황 수 만큼 만들어야 함

** 이러한 아비규환을 구제 해주는 것이 "제어문(Flow Control Statements)"입니다. 제어문이라는 것을 이용하면 시간의 순서에 따라서 실행되는 이 흐름을 제어 해서 다르게 동작이 가능함.



최소한의 도구를 이용해서 나의 문제를 해결 하는 것이 훨씬 더 가치가 있다.!!! 해결해다가 도저히 해결이 안되는 때가 오면 그때가 바로 좀더 복잡하고 세련된 것을 배울 타이밍!


