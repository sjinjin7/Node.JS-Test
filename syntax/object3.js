// 1억 줄의 코드가 잇고 참여하는 자가 2천명이라고 가정
// 수많은 문제가 생김


var v1 = 'v1';
//두변수 사이에 1만개의코드가 끼워져있음
v1 = 'egoing';  // 누군가에 의해 v1변수가 다른 데이터를 저장시켜버림=> 수많은 버그
var v2 = 'v2';

// 이러한 문제를 해결 해 줄 수 있는것이 객체
// 1억개 파일을 몰어넣엇던 상황이 폴더(객체)라는 기능이 만들어지면서 폴더로 파일들을 정리정돈 하는 것과 같은 맥락.
var o ={
  v1:'v1',
  v2:'v2',
  f1:function(){
    console.log(this.v1);  // 함수가 객체안에서 사용될때 그 함수가 자신이 속해있는 객체를 참조 할 수 있는 특수한 약속을 함. => this
  },
  f2:function(){
    console.log(this.v2);
  }
}
// 우리의 코드를 훨씬 잘 정리됨.o라는 객체안에 서로 연관된 값들과 그 값을 처리하는 함수들이 그룹핑 되어 있기 때문!
o.f1();
o.f2();

/*
function f1(){
  console.log(o.v1);
}
// 분명 f1함수가 존재함에도 누군가가 같은이름의 다른기능을 가진 함수를 만들엇다고 가정
// 이전의 f1함수가 삭제된것과 다름없게됨
// 이러한 경우도 해결할 수 있는 방법이 객체



function f2(){
  console.log(o.v2);
}

f1();
f2();
*/
